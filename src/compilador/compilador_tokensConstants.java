/* Generated By:JavaCC: Do not edit this line. compilador_tokensConstants.java */
package compilador;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface compilador_tokensConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DO = 5;
  /** RegularExpression Id. */
  int THIS = 6;
  /** RegularExpression Id. */
  int BODY = 7;
  /** RegularExpression Id. */
  int DESCRIPTION = 8;
  /** RegularExpression Id. */
  int DECLARATION = 9;
  /** RegularExpression Id. */
  int TYPE = 10;
  /** RegularExpression Id. */
  int IS = 11;
  /** RegularExpression Id. */
  int CONSTANT = 12;
  /** RegularExpression Id. */
  int AND = 13;
  /** RegularExpression Id. */
  int VARIABLE = 14;
  /** RegularExpression Id. */
  int AS = 15;
  /** RegularExpression Id. */
  int INTEGER = 16;
  /** RegularExpression Id. */
  int REAL = 17;
  /** RegularExpression Id. */
  int STRING = 18;
  /** RegularExpression Id. */
  int LOGIC = 19;
  /** RegularExpression Id. */
  int DESIGNATE = 20;
  /** RegularExpression Id. */
  int TO = 21;
  /** RegularExpression Id. */
  int READ = 22;
  /** RegularExpression Id. */
  int WRITE = 23;
  /** RegularExpression Id. */
  int ALL = 24;
  /** RegularExpression Id. */
  int REPEAT = 25;
  /** RegularExpression Id. */
  int TRUE = 26;
  /** RegularExpression Id. */
  int UNTRUE = 27;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 28;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 29;
  /** RegularExpression Id. */
  int POINT = 30;
  /** RegularExpression Id. */
  int COMMA = 31;
  /** RegularExpression Id. */
  int EQUAL = 32;
  /** RegularExpression Id. */
  int PLUS = 33;
  /** RegularExpression Id. */
  int MINUS = 34;
  /** RegularExpression Id. */
  int ASTERISK = 35;
  /** RegularExpression Id. */
  int DIVISION = 36;
  /** RegularExpression Id. */
  int DOUBLE_ASTERISK = 37;
  /** RegularExpression Id. */
  int PERCENT = 38;
  /** RegularExpression Id. */
  int DOUBLE_PERCENT = 39;
  /** RegularExpression Id. */
  int DOUBLE_EQUALS = 40;
  /** RegularExpression Id. */
  int EXCLAMATION_EQUAL = 41;
  /** RegularExpression Id. */
  int DOUBLE_LESS_THAN = 42;
  /** RegularExpression Id. */
  int DOUBLE_GREATER_THAN = 43;
  /** RegularExpression Id. */
  int DOUBLE_LESS_THAN_EQUAL = 44;
  /** RegularExpression Id. */
  int DOUBLE_GREATER_THAN_EQUAL = 45;
  /** RegularExpression Id. */
  int AMPERSAND = 46;
  /** RegularExpression Id. */
  int PIPE = 47;
  /** RegularExpression Id. */
  int EXCLAMATION = 48;
  /** RegularExpression Id. */
  int OPEN_PARENTHESIS = 49;
  /** RegularExpression Id. */
  int CLOSE_PARENTHESIS = 50;
  /** RegularExpression Id. */
  int IDENTIFICADORES = 51;
  /** RegularExpression Id. */
  int ERRO_IDENTIFICADOR_INICIO_LETRA_MINUSCULA = 52;
  /** RegularExpression Id. */
  int ERRO_IDENTIFICADOR_FINAL_NUMERICO = 53;
  /** RegularExpression Id. */
  int ERRO_IDENTIFICADOR_TRES_NUMEROS_CONSECUTIVO = 54;
  /** RegularExpression Id. */
  int ERRO_IDENTIFICADOR_UNDERLINE_CONSECUTIVO = 55;
  /** RegularExpression Id. */
  int LETRA_MAIUSCULA = 56;
  /** RegularExpression Id. */
  int LETRA = 57;
  /** RegularExpression Id. */
  int UNDERLINE = 58;
  /** RegularExpression Id. */
  int CONSTANTE_REAL = 59;
  /** RegularExpression Id. */
  int ERRO_CONSTANTE_REAL = 60;
  /** RegularExpression Id. */
  int CONSTANTE_INTEIRA = 61;
  /** RegularExpression Id. */
  int ERRO_CONSTANTE_INTEIRA = 62;
  /** RegularExpression Id. */
  int DIGITO = 63;
  /** RegularExpression Id. */
  int SIMBOLOS_INVALIDOS = 64;
  /** RegularExpression Id. */
  int CONSTANTE_LITERAL = 65;
  /** RegularExpression Id. */
  int ERRO_CONSTANTE_LITERAL = 66;
  /** RegularExpression Id. */
  int ASCII = 67;
  /** RegularExpression Id. */
  int ASPAS = 68;
  /** RegularExpression Id. */
  int COMENTARIO_LINHA = 69;
  /** RegularExpression Id. */
  int ASCII2 = 70;
  /** RegularExpression Id. */
  int COMENTARIO_BLOCO = 71;
  /** RegularExpression Id. */
  int ERRO_COMENTARIO_BLOCO = 72;
  /** RegularExpression Id. */
  int COMENTARIO_SIMBOLO = 73;
  /** RegularExpression Id. */
  int ASCCI3 = 74;
  /** RegularExpression Id. */
  int INVALIDO_LEXICO = 75;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"do\"",
    "\"this\"",
    "\"body\"",
    "\"description\"",
    "\"declaration\"",
    "\"type\"",
    "\"is\"",
    "\"constant\"",
    "\"and\"",
    "\"variable\"",
    "\"as\"",
    "\"integer\"",
    "\"real\"",
    "\"string\"",
    "\"logic\"",
    "\"designate\"",
    "\"to\"",
    "\"read\"",
    "\"write\"",
    "\"all\"",
    "\"repeat\"",
    "\"true\"",
    "\"untrue\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\",\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"**\"",
    "\"%\"",
    "\"%%\"",
    "\"==\"",
    "\"!=\"",
    "\"<<\"",
    "\">>\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "<IDENTIFICADORES>",
    "<ERRO_IDENTIFICADOR_INICIO_LETRA_MINUSCULA>",
    "<ERRO_IDENTIFICADOR_FINAL_NUMERICO>",
    "<ERRO_IDENTIFICADOR_TRES_NUMEROS_CONSECUTIVO>",
    "<ERRO_IDENTIFICADOR_UNDERLINE_CONSECUTIVO>",
    "<LETRA_MAIUSCULA>",
    "<LETRA>",
    "\"_\"",
    "<CONSTANTE_REAL>",
    "<ERRO_CONSTANTE_REAL>",
    "<CONSTANTE_INTEIRA>",
    "<ERRO_CONSTANTE_INTEIRA>",
    "<DIGITO>",
    "<SIMBOLOS_INVALIDOS>",
    "<CONSTANTE_LITERAL>",
    "<ERRO_CONSTANTE_LITERAL>",
    "<ASCII>",
    "\"\\\"\"",
    "<COMENTARIO_LINHA>",
    "<ASCII2>",
    "<COMENTARIO_BLOCO>",
    "<ERRO_COMENTARIO_BLOCO>",
    "\"#\"",
    "<ASCCI3>",
    "<INVALIDO_LEXICO>",
  };

}
