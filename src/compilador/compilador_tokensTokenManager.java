/* compilador_tokensTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. compilador_tokensTokenManager.java */
package compilador;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

/** Token Manager. */
@SuppressWarnings("unused")public class compilador_tokensTokenManager implements compilador_tokensConstants {
    int countLexError = 0;
    String mensagem = "";

    public int foundLexError() {
        return countLexError;
    }

    public String getMessage() {
        return mensagem;
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 34:
         jjmatchedKind = 68;
         return jjMoveNfa_0(0, 0);
      case 35:
         jjmatchedKind = 73;
         return jjMoveNfa_0(0, 0);
      case 37:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 38:
         jjmatchedKind = 46;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 49;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 50;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 43:
         jjmatchedKind = 33;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 31;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 34;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 30;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 36;
         return jjMoveNfa_0(0, 0);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x140000000000L);
      case 61:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x280000000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x100a000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x100320L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x10800L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x2420000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x4200440L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 91:
         jjmatchedKind = 28;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 29;
         return jjMoveNfa_0(0, 0);
      case 95:
         jjmatchedKind = 58;
         return jjMoveNfa_0(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100a000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100320L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10800L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2420000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4200440L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 124:
         jjmatchedKind = 47;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         break;
      case 60:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 61:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x2520300L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x8012000L);
      case 79:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x81080L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800000L);
      case 83:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2520300L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8012000L);
      case 111:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x81080L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800000L);
      case 115:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 2;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x420000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 68:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x800040L);
      case 76:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000400L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x44000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x100100L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x8010000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x420000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 100:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800040L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000400L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x44000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100100L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x8010000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 68:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2010000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c4000L);
      case 76:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 83:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 89:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 100:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2010000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c4000L);
      case 108:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 115:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 121:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x2004200L);
      case 67:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         break;
      case 69:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
         }
         break;
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x110000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2004200L);
      case 99:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
         }
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x110000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 69:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 71:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 84:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 5;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 103:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x100200L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 82:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100200L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 114:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x100300L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x100300L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 8;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x300L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 8;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x300L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x300L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x300L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 10;
         }
         break;
      case 110:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 82;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 69)
                        kind = 69;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if ((0xfffffffbffffffffL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAddStates(3, 6); }
                  }
                  if ((0xfffffff7fffffbffL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if ((0xfffffffeffffc9ffL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     { jjCheckNAdd(4); }
                  }
                  if ((0x8c00009dffffffffL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAddStates(7, 13); }
                  }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 2:
                  if ((0xfffffff7fffffbffL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 3:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 74)
                     kind = 74;
                  break;
               case 4:
                  if ((0xfffffffeffffc9ffL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAdd(4); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAddStates(17, 19); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(20, 22); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(37, 38); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(7, 13); }
                  break;
               case 40:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 44:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(48); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(48); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(52); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(52); }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAdd(54); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(29, 31); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(44); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(57, 44); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(32, 35); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(60, 61); }
                  break;
               case 61:
                  if (curChar != 46)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(62); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(62); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(36, 38); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(39, 41); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(40); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 40); }
                  break;
               case 67:
                  if (curChar != 34)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddStates(3, 6); }
                  break;
               case 68:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 69:
                  if (curChar == 34 && kind > 65)
                     kind = 65;
                  break;
               case 70:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(70); }
                  break;
               case 71:
                  { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 72:
                  if (curChar != 34)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(72); }
                  break;
               case 73:
                  if (curChar != 35)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 74:
                  if ((0xfffffff7fffffbffL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAdd(74); }
                  break;
               case 75:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(76, 77); }
                  break;
               case 76:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(76, 77); }
                  break;
               case 77:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if (curChar == 35 && kind > 71)
                     kind = 71;
                  break;
               case 79:
                  if (curChar != 35)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 80:
                  if ((0xfffffff7ffffffffL & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 81:
                  if (curChar == 35 && kind > 72)
                     kind = 72;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAdd(4); }
                  if (kind > 74)
                     kind = 74;
                  if (kind > 70)
                     kind = 70;
                  if (kind > 67)
                     kind = 67;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     { jjCheckNAddStates(42, 44); }
                  }
                  else if ((0xe8000001d0000001L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAddStates(45, 56); }
                  }
                  break;
               case 1:
                  if (kind > 67)
                     kind = 67;
                  break;
               case 2:
                  if (kind > 70)
                     kind = 70;
                  break;
               case 3:
                  if (kind > 74)
                     kind = 74;
                  break;
               case 4:
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(45, 56); }
                  break;
               case 6:
                  if (curChar != 95)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(57, 59); }
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAdd(6); }
                  break;
               case 12:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(60, 62); }
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 18:
                  if (curChar != 95)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddStates(63, 65); }
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAdd(18); }
                  break;
               case 23:
                  if (curChar != 95)
                     break;
                  if (kind > 55)
                     kind = 55;
                  { jjCheckNAddStates(66, 68); }
                  break;
               case 24:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  { jjCheckNAddStates(69, 71); }
                  break;
               case 25:
                  if (curChar != 95)
                     break;
                  if (kind > 55)
                     kind = 55;
                  { jjCheckNAddStates(69, 71); }
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  { jjCheckNAddTwoStates(24, 26); }
                  break;
               case 29:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if (curChar != 95)
                     break;
                  if (kind > 55)
                     kind = 55;
                  { jjCheckNAddTwoStates(24, 26); }
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAddStates(42, 44); }
                  break;
               case 33:
                  if (curChar != 95)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAddStates(72, 74); }
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 38:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 68:
                  { jjAddStates(75, 76); }
                  break;
               case 70:
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 71:
                  { jjAddStates(77, 78); }
                  break;
               case 74:
                  if (kind > 69)
                     kind = 69;
                  jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  { jjAddStates(79, 80); }
                  break;
               case 80:
                  if (kind > 72)
                     kind = 72;
                  { jjAddStates(81, 82); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     { jjCheckNAdd(4); }
                  }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 74)
                     kind = 74;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAdd(4); }
                  break;
               case 68:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(75, 76); }
                  break;
               case 70:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 71:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(77, 78); }
                  break;
               case 74:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(79, 80); }
                  break;
               case 80:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjAddStates(81, 82); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 82 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   74, 75, 79, 68, 69, 70, 71, 40, 44, 49, 53, 56, 59, 64, 9, 10, 
   11, 15, 16, 17, 20, 21, 22, 27, 28, 29, 36, 37, 38, 57, 44, 58, 
   60, 61, 60, 63, 60, 61, 60, 65, 40, 66, 33, 34, 35, 6, 7, 8, 
   12, 13, 18, 19, 20, 23, 24, 26, 14, 7, 6, 8, 13, 12, 14, 19, 
   18, 20, 23, 24, 26, 24, 25, 26, 34, 33, 35, 68, 69, 71, 72, 76, 
   77, 80, 81, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\133", "\135", "\56", "\54", "\75", "\53", "\55", "\52", "\57", "\52\52", 
"\45", "\45\45", "\75\75", "\41\75", "\74\74", "\76\76", "\74\74\75", "\76\76\75", 
"\46", "\174", "\41", "\50", "\51", null, null, null, null, null, null, null, "\137", 
null, null, null, null, null, null, null, null, null, "\42", null, null, null, null, 
"\43", null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 75 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        System.out.println("Erro Lexico na linha "+input_stream.getEndLine()+ " e coluna "+(input_stream.getEndColumn() - image.length()+1)+": " +image);
        mensagem += "Erro Lexico na linha "+input_stream.getEndLine()+ " e coluna "+(input_stream.getEndColumn() - image.length()+1)+": " +image +"\u005cn";
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 6 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 7 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.out.println("Palavra Reservada: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Palavra Reservada; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
    System.out.println("Simbolo Especial: "+image);
    mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
    "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
    +"; Caterogia: Simbolo Especial; ID: "+ matchedToken.kind+"\u005cn";
         break;
      case 51 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println("Identificador: "+image);
        mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
        "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
        +"; Caterogia: Identificador; ID: "+matchedToken.kind+"\u005cn";
         break;
      case 52 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        mensagem += "Identificador inv\u00e1lido (Primeira letra min\u00fascula!): "+image+ "; Linha: " +input_stream.getEndLine()+
        "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
        +"\u005cn";
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        mensagem += "Identificador inv\u00e1lido (\u00daltimo d\u00edgito igual a n\u00famero!): "+image+ "; Linha: " +input_stream.getEndLine()+
        "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
        +"\u005cn";
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        mensagem += "Identificador inv\u00e1lido (Mais de dois n\u00fameros consecutivos!): "+image+ "; Linha: " +input_stream.getEndLine()+
        "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
        +"\u005cn";
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        mensagem += "Identificador inv\u00e1lido (Underlines consecutivos!): "+image+ "; Linha: " +input_stream.getEndLine()+
        "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
        +"\u005cn";
         break;
      case 59 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            System.out.println("Constante real: "+image);
            mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
            "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
            +"; Caterogia: Constante Real; ID: "+matchedToken.kind+"\u005cn";
         break;
      case 60 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        countLexError++;
            System.out.println("Constante inteira: "+image);
            mensagem += "Constante real inv\u00e1lida: "+image+ "; Linha: " +input_stream.getEndLine()+
            "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
            +"\u005cn";
         break;
      case 61 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            System.out.println("Constante inteira: "+image);
            mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
            "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
            +"; Caterogia: Constante Inteira; ID: "+matchedToken.kind+"\u005cn";
         break;
      case 62 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        countLexError++;
            System.out.println("Constante inteira: "+image);
            mensagem += "Constante inteira inv\u00e1lida: "+image+ "; Linha: " +input_stream.getEndLine()+
            "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
            +"\u005cn";
         break;
      case 64 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        mensagem += "Simbolo inv\u00e1lido: "+image+ "; Linha: " +input_stream.getEndLine()+
        "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
        +"\u005cn";
         break;
      case 65 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            System.out.println("Constante literal: "+image);
            mensagem += "Lexema: "+image+ "; Linha: " +input_stream.getEndLine()+
            "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
            +"; Caterogia: Constante Literal; ID: "+matchedToken.kind+"\u005cn";
         break;
      case 66 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    countLexError++;
                    mensagem += "Erro em constante literal: "+image+ "; Linha: " +input_stream.getEndLine()+
        "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
        +"\u005cn";
         break;
      case 69 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println("Comentario de linha");
         break;
      case 71 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println("Comentario de bloco");
         break;
      case 72 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        mensagem += "Comentario de bloco n\u00e3o finalizado: "+image+ "; Linha: " +input_stream.getEndLine()+
        "; Coluna: "+(input_stream.getEndColumn() - image.length()+1)
        +"\u005cn";
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public compilador_tokensTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public compilador_tokensTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 82; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x7ffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x800L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x800L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[82];
    private final int[] jjstateSet = new int[2 * 82];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
